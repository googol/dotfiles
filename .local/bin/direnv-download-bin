#!/bin/bash

set -eEuo pipefail

main() {
    local -r bin="${1}"
    local -r temp_dir="$(mktemp -d)"
    trap "rm -rf $temp_dir" EXIT

    export ORIGINAL_DIR="$(pwd)"

    shift

    pushd "$temp_dir" > /dev/null
    case "$bin" in
        "node")
            download_node "$@"
            ;;
        "terraform")
            download_terraform "$@"
            ;;
        *)
            log_fail "Unknown binary ${bin}"
            ;;
    esac
    popd > /dev/null

    direnv reload
}

download_node() {
    local -r node_versions_dir="${NODE_VERSIONS}"
    local -r version="${1:-}"

    if [[ -z "$node_versions_dir" ]]; then
        log_fail "Specify the NODE_VERSIONS env variable pointing to the directory where the node versions will be stored"
    fi

    if [[ ! -d "$node_versions_dir" ]]; then
        log_fail "The specified NODE_VERSIONS env variable ($node_versions_dir) doesn't point to a directory"
    fi

    if [[ -z "$version" ]]; then
        log_fail "Specify the version to download"
    fi

    local -r bin_directory="node-v${version}-linux-x64"

    if [[ -d "${node_versions_dir}/${bin_directory}" ]]; then
        log_fail "The requested version has already been downloaded"
    fi

    local -r base_url="https://nodejs.org/dist/v${version}"

    local -r shasum_file="SHASUMS256.txt"
    local -r signature_file="${shasum_file}.sig"

    local -r archive_extension="tar.gz" 
    local -r bin_archive="${bin_directory}.${archive_extension}"

    local -r shasum_url="${base_url}/${shasum_file}"
    local -r signature_url="${base_url}/${signature_file}"
    local -r bin_archive_url="${base_url}/${bin_archive}"

    receive_node_authorized_keys

    wget "${shasum_url}" &> /dev/null || log_fail "Failed to download the shasum file"
    wget "${signature_url}" &> /dev/null || log_fail "Failed to download the signature file"
    verify_shasum_file_signature "${shasum_file}" "${signature_file}"

    log "Downloading file"
    wget "${bin_archive_url}" &> /dev/null || log_fail "Failed to download the archive"
    log "..done"
    verify_shasum "${shasum_file}"

    log "Move files"
    tar xvzf "${bin_archive}" &> /dev/null || log_fail "Failed to extract the archive"
    cp -r "${bin_directory}" "${node_versions_dir}/" &> /dev/null || log_fail "Failed to copy the binary to the target directory"
    log "..done"
}

download_terraform() {
    local -r terraform_versions_dir="${TERRAFORM_VERSIONS}"
    local version="${1:-}"

    if [[ -z "$terraform_versions_dir" ]]; then
        log_fail "Specify the TERRAFORM_VERSIONS env variable pointing to the directory where the terraform versions will be stored"
    fi

    if [[ ! -d "$terraform_versions_dir" ]]; then
        log_fail "The specified TERRAFORM_VERSIONS env variable ($terraform_versions_dir) doesn't point to a directory"
    fi

    if [[ -z "$version" ]]; then
        if [[ -f "$ORIGINAL_DIR/.terraform-version" ]]; then
            version="$(cat "$ORIGINAL_DIR/.terraform-version")"
        else
            log_fail "Specify the version to download"
        fi
    fi

    local -r bin_directory="${terraform_versions_dir}/${version}"

    if [[ -d "${bin_directory}" ]]; then
        log_fail "The requested version has already been downloaded"
    fi

    local -r base_url="https://releases.hashicorp.com/terraform/${version}"
    local -r shasum_file="terraform_${version}_SHA256SUMS"
    local -r signature_file="${shasum_file}.sig"

    local -r archive_extension="zip" 
    local -r bin_archive="terraform_${version}_linux_amd64.${archive_extension}"

    local -r shasum_url="${base_url}/${shasum_file}"
    local -r signature_url="${base_url}/${signature_file}"
    local -r bin_archive_url="${base_url}/${bin_archive}"

    receive_terraform_authorized_keys

    wget "${shasum_url}" &> /dev/null || log_fail "Failed to download the shasum file"
    wget "${signature_url}" &> /dev/null || log_fail "Failed to download the signature file"
    verify_shasum_file_signature "${shasum_file}" "${signature_file}"

    log "Downloading file"
    wget "${bin_archive_url}" &> /dev/null || log_fail "Failed to download the binary archive"
    log "..done"
    verify_shasum "${shasum_file}"

    log "Move files"
    unzip "${bin_archive}" &> /dev/null || log_fail "Failed to unzip the archive"
    mkdir "${bin_directory}"
    cp "terraform" "${bin_directory}/" &> /dev/null || log_failed "Failed to copy the binary to the target directory"
    chmod +x "${bin_directory}/terraform"
    log "..done"
}

receive_node_authorized_keys() {
    local -r keys=(
        "4ED778F539E3634C779C87C6D7062848A1AB005C"
        "141F07595B7B3FFE74309A937405533BE57C7D57"
        "74F12602B6F1C4E913FAA37AD3A89613643B6201"
        "DD792F5973C6DE52C432CBDAC77ABFA00DDBF2B7"
        "8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600"
        "C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8"
        "890C08DB8579162FEE0DF9DB8BEAB4DFCF555EF4"
        "C82FA3AE1CBEDC6BE46B9360C43CEC45C17AB93C"
        "108F52B48DB57BB0CC439B2997B01419BD92F80A"
        "A363A499291CBBC940DD62E41F10027AF002F8B0"
    )

    log "Fetching gpg keys for node release verification"
    gpg --keyserver "hkps://keys.openpgp.org" --recv-keys "${keys[@]}" &> /dev/null || log_fail ".. Unable to receive all nodejs pgp keys"
    log ".. done"
}

receive_terraform_authorized_keys() {
    local -r keys=(
        "C874011F0AB405110D02105534365D9472D7468F"
    )

    log "Fetching gpg keys for teraform release verification"
    gpg --keyserver "hkps://keys.openpgp.org" --recv-keys "${keys[@]}" &> /dev/null || log_fail ".. Unable to receive all hashicorp pgp keys"
    log ".. done"
}

verify_shasum_file_signature() {
    local -r shasum_file="${1}"
    local -r signature_file="${2}"

    log "Checking signature of shasum file"
    gpg --quiet --verify "${signature_file}" "${shasum_file}" &> /dev/null || log_fail ".. Unable to verify the shasum signature. Check that all required pgp keys are imported in the script."
    log ".. done"
}

verify_shasum() {
    local -r shasum_file="${1}"

    log "Checking shasum of received file"
    sha256sum --check --ignore-missing "${shasum_file}" &> /dev/null || log_fail ".. Checksum doesn't match file"
    log "..done"
}

log() {
    local -r log_message="${1}"

    >&2 echo "$log_message"
}

log_fail() {
    local -r log_message="${1}"

    log "${log_message}"

    exit 1
}

main "$@"
